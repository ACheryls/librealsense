// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2022 Intel Corporation. All Rights Reserved.

/*!
 * @file control.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <realdds/topics/control/control.h>
#include "controlTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

librealsense::dds::topics::raw::device::control::control()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7e0b0338
    m_id = 0;
    // m_size com.eprosima.idl.parser.typecode.PrimitiveTypeCode@617faa95
    m_size = 0;
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@1e127982


    // Just to register all known types
    registercontrolTypes();
}

librealsense::dds::topics::raw::device::control::~control()
{



}

librealsense::dds::topics::raw::device::control::control(
        const control& x)
{
    m_id = x.m_id;
    m_size = x.m_size;
    m_data = x.m_data;
}

librealsense::dds::topics::raw::device::control::control(
        control&& x)
{
    m_id = x.m_id;
    m_size = x.m_size;
    m_data = std::move(x.m_data);
}

librealsense::dds::topics::raw::device::control& librealsense::dds::topics::raw::device::control::operator =(
        const control& x)
{

    m_id = x.m_id;
    m_size = x.m_size;
    m_data = x.m_data;

    return *this;
}

librealsense::dds::topics::raw::device::control& librealsense::dds::topics::raw::device::control::operator =(
        control&& x)
{

    m_id = x.m_id;
    m_size = x.m_size;
    m_data = std::move(x.m_data);

    return *this;
}

bool librealsense::dds::topics::raw::device::control::operator ==(
        const control& x) const
{

    return (m_id == x.m_id && m_size == x.m_size && m_data == x.m_data);
}

bool librealsense::dds::topics::raw::device::control::operator !=(
        const control& x) const
{
    return !(*this == x);
}

size_t librealsense::dds::topics::raw::device::control::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t librealsense::dds::topics::raw::device::control::getCdrSerializedSize(
        const librealsense::dds::topics::raw::device::control& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void librealsense::dds::topics::raw::device::control::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_size;
    scdr << m_data;

}

void librealsense::dds::topics::raw::device::control::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_size;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void librealsense::dds::topics::raw::device::control::id(
        uint16_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint16_t librealsense::dds::topics::raw::device::control::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint16_t& librealsense::dds::topics::raw::device::control::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member size
 * @param _size New value for member size
 */
void librealsense::dds::topics::raw::device::control::size(
        uint32_t _size)
{
    m_size = _size;
}

/*!
 * @brief This function returns the value of member size
 * @return Value of member size
 */
uint32_t librealsense::dds::topics::raw::device::control::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
uint32_t& librealsense::dds::topics::raw::device::control::size()
{
    return m_size;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void librealsense::dds::topics::raw::device::control::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void librealsense::dds::topics::raw::device::control::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& librealsense::dds::topics::raw::device::control::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& librealsense::dds::topics::raw::device::control::data()
{
    return m_data;
}

size_t librealsense::dds::topics::raw::device::control::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool librealsense::dds::topics::raw::device::control::isKeyDefined()
{
    return false;
}

void librealsense::dds::topics::raw::device::control::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}





