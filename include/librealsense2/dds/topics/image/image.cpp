// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2022 Intel Corporation. All Rights Reserved.

/*!
 * @file image.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "image.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

librealsense::dds::topics::raw::device::image::image()
{
    // m_raw_data com.eprosima.idl.parser.typecode.SequenceTypeCode@6dde5c8c

    // m_size com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5123a213
    m_size = 0;
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@52525845
    m_width = 0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b94d659
    m_height = 0;
    // m_format com.eprosima.idl.parser.typecode.PrimitiveTypeCode@24b1d79b
    m_format = 0;

}

librealsense::dds::topics::raw::device::image::~image()
{





}

librealsense::dds::topics::raw::device::image::image(
        const image& x)
{
    m_raw_data = x.m_raw_data;
    m_size = x.m_size;
    m_width = x.m_width;
    m_height = x.m_height;
    m_format = x.m_format;
}

librealsense::dds::topics::raw::device::image::image(
        image&& x)
{
    m_raw_data = std::move(x.m_raw_data);
    m_size = x.m_size;
    m_width = x.m_width;
    m_height = x.m_height;
    m_format = x.m_format;
}

librealsense::dds::topics::raw::device::image& librealsense::dds::topics::raw::device::image::operator =(
        const image& x)
{

    m_raw_data = x.m_raw_data;
    m_size = x.m_size;
    m_width = x.m_width;
    m_height = x.m_height;
    m_format = x.m_format;

    return *this;
}

librealsense::dds::topics::raw::device::image& librealsense::dds::topics::raw::device::image::operator =(
        image&& x)
{

    m_raw_data = std::move(x.m_raw_data);
    m_size = x.m_size;
    m_width = x.m_width;
    m_height = x.m_height;
    m_format = x.m_format;

    return *this;
}

bool librealsense::dds::topics::raw::device::image::operator ==(
        const image& x) const
{

    return (m_raw_data == x.m_raw_data && m_size == x.m_size && m_width == x.m_width && m_height == x.m_height && m_format == x.m_format);
}

bool librealsense::dds::topics::raw::device::image::operator !=(
        const image& x) const
{
    return !(*this == x);
}

size_t librealsense::dds::topics::raw::device::image::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t librealsense::dds::topics::raw::device::image::getCdrSerializedSize(
        const librealsense::dds::topics::raw::device::image& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.raw_data().size() > 0)
    {
        current_alignment += (data.raw_data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void librealsense::dds::topics::raw::device::image::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_raw_data;
    scdr << m_size;
    scdr << m_width;
    scdr << m_height;
    scdr << m_format;

}

void librealsense::dds::topics::raw::device::image::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_raw_data;
    dcdr >> m_size;
    dcdr >> m_width;
    dcdr >> m_height;
    dcdr >> m_format;
}

/*!
 * @brief This function copies the value in member raw_data
 * @param _raw_data New value to be copied in member raw_data
 */
void librealsense::dds::topics::raw::device::image::raw_data(
        const std::vector<uint8_t>& _raw_data)
{
    m_raw_data = _raw_data;
}

/*!
 * @brief This function moves the value in member raw_data
 * @param _raw_data New value to be moved in member raw_data
 */
void librealsense::dds::topics::raw::device::image::raw_data(
        std::vector<uint8_t>&& _raw_data)
{
    m_raw_data = std::move(_raw_data);
}

/*!
 * @brief This function returns a constant reference to member raw_data
 * @return Constant reference to member raw_data
 */
const std::vector<uint8_t>& librealsense::dds::topics::raw::device::image::raw_data() const
{
    return m_raw_data;
}

/*!
 * @brief This function returns a reference to member raw_data
 * @return Reference to member raw_data
 */
std::vector<uint8_t>& librealsense::dds::topics::raw::device::image::raw_data()
{
    return m_raw_data;
}
/*!
 * @brief This function sets a value in member size
 * @param _size New value for member size
 */
void librealsense::dds::topics::raw::device::image::size(
        uint32_t _size)
{
    m_size = _size;
}

/*!
 * @brief This function returns the value of member size
 * @return Value of member size
 */
uint32_t librealsense::dds::topics::raw::device::image::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
uint32_t& librealsense::dds::topics::raw::device::image::size()
{
    return m_size;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void librealsense::dds::topics::raw::device::image::width(
        uint16_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint16_t librealsense::dds::topics::raw::device::image::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint16_t& librealsense::dds::topics::raw::device::image::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void librealsense::dds::topics::raw::device::image::height(
        uint16_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint16_t librealsense::dds::topics::raw::device::image::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint16_t& librealsense::dds::topics::raw::device::image::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member format
 * @param _format New value for member format
 */
void librealsense::dds::topics::raw::device::image::format(
        uint8_t _format)
{
    m_format = _format;
}

/*!
 * @brief This function returns the value of member format
 * @return Value of member format
 */
uint8_t librealsense::dds::topics::raw::device::image::format() const
{
    return m_format;
}

/*!
 * @brief This function returns a reference to member format
 * @return Reference to member format
 */
uint8_t& librealsense::dds::topics::raw::device::image::format()
{
    return m_format;
}


size_t librealsense::dds::topics::raw::device::image::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool librealsense::dds::topics::raw::device::image::isKeyDefined()
{
    return false;
}

void librealsense::dds::topics::raw::device::image::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}





