// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2022 Intel Corporation. All Rights Reserved.

/*!
 * @file control.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_LIBREALSENSE_DDS_TOPICS_RAW_DEVICE_CONTROL_H_
#define _FAST_DDS_GENERATED_LIBREALSENSE_DDS_TOPICS_RAW_DEVICE_CONTROL_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(control_SOURCE)
#define control_DllAPI __declspec( dllexport )
#else
#define control_DllAPI __declspec( dllimport )
#endif // control_SOURCE
#else
#define control_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define control_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace librealsense {
    namespace dds {
        namespace topics {
            namespace raw {
                namespace device {
                    /*!
                     * @brief This class represents the structure control defined by the user in the IDL file.
                     * @ingroup CONTROL
                     */
                    class control
                    {
                    public:

                        /*!
                         * @brief Default constructor.
                         */
                        eProsima_user_DllExport control();

                        /*!
                         * @brief Default destructor.
                         */
                        eProsima_user_DllExport ~control();

                        /*!
                         * @brief Copy constructor.
                         * @param x Reference to the object librealsense::dds::topics::raw::device::control that will be copied.
                         */
                        eProsima_user_DllExport control(
                                const control& x);

                        /*!
                         * @brief Move constructor.
                         * @param x Reference to the object librealsense::dds::topics::raw::device::control that will be copied.
                         */
                        eProsima_user_DllExport control(
                                control&& x);

                        /*!
                         * @brief Copy assignment.
                         * @param x Reference to the object librealsense::dds::topics::raw::device::control that will be copied.
                         */
                        eProsima_user_DllExport control& operator =(
                                const control& x);

                        /*!
                         * @brief Move assignment.
                         * @param x Reference to the object librealsense::dds::topics::raw::device::control that will be copied.
                         */
                        eProsima_user_DllExport control& operator =(
                                control&& x);

                        /*!
                         * @brief Comparison operator.
                         * @param x librealsense::dds::topics::raw::device::control object to compare.
                         */
                        eProsima_user_DllExport bool operator ==(
                                const control& x) const;

                        /*!
                         * @brief Comparison operator.
                         * @param x librealsense::dds::topics::raw::device::control object to compare.
                         */
                        eProsima_user_DllExport bool operator !=(
                                const control& x) const;

                        /*!
                         * @brief This function sets a value in member id
                         * @param _id New value for member id
                         */
                        eProsima_user_DllExport void id(
                                uint16_t _id);

                        /*!
                         * @brief This function returns the value of member id
                         * @return Value of member id
                         */
                        eProsima_user_DllExport uint16_t id() const;

                        /*!
                         * @brief This function returns a reference to member id
                         * @return Reference to member id
                         */
                        eProsima_user_DllExport uint16_t& id();

                        /*!
                         * @brief This function sets a value in member size
                         * @param _size New value for member size
                         */
                        eProsima_user_DllExport void size(
                                uint32_t _size);

                        /*!
                         * @brief This function returns the value of member size
                         * @return Value of member size
                         */
                        eProsima_user_DllExport uint32_t size() const;

                        /*!
                         * @brief This function returns a reference to member size
                         * @return Reference to member size
                         */
                        eProsima_user_DllExport uint32_t& size();

                        /*!
                         * @brief This function copies the value in member raw_data
                         * @param _raw_data New value to be copied in member raw_data
                         */
                        eProsima_user_DllExport void raw_data(
                                const std::vector<uint8_t>& _raw_data);

                        /*!
                         * @brief This function moves the value in member raw_data
                         * @param _raw_data New value to be moved in member raw_data
                         */
                        eProsima_user_DllExport void raw_data(
                                std::vector<uint8_t>&& _raw_data);

                        /*!
                         * @brief This function returns a constant reference to member raw_data
                         * @return Constant reference to member raw_data
                         */
                        eProsima_user_DllExport const std::vector<uint8_t>& raw_data() const;

                        /*!
                         * @brief This function returns a reference to member raw_data
                         * @return Reference to member raw_data
                         */
                        eProsima_user_DllExport std::vector<uint8_t>& raw_data();

                        /*!
                         * @brief This function returns the maximum serialized size of an object
                         * depending on the buffer alignment.
                         * @param current_alignment Buffer alignment.
                         * @return Maximum serialized size.
                         */
                        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                                size_t current_alignment = 0);

                        /*!
                         * @brief This function returns the serialized size of a data depending on the buffer alignment.
                         * @param data Data which is calculated its serialized size.
                         * @param current_alignment Buffer alignment.
                         * @return Serialized size.
                         */
                        eProsima_user_DllExport static size_t getCdrSerializedSize(
                                const librealsense::dds::topics::raw::device::control& data,
                                size_t current_alignment = 0);


                        /*!
                         * @brief This function serializes an object using CDR serialization.
                         * @param cdr CDR serialization object.
                         */
                        eProsima_user_DllExport void serialize(
                                eprosima::fastcdr::Cdr& cdr) const;

                        /*!
                         * @brief This function deserializes an object using CDR serialization.
                         * @param cdr CDR serialization object.
                         */
                        eProsima_user_DllExport void deserialize(
                                eprosima::fastcdr::Cdr& cdr);



                        /*!
                         * @brief This function returns the maximum serialized size of the Key of an object
                         * depending on the buffer alignment.
                         * @param current_alignment Buffer alignment.
                         * @return Maximum serialized size.
                         */
                        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                                size_t current_alignment = 0);

                        /*!
                         * @brief This function tells you if the Key has been defined for this type
                         */
                        eProsima_user_DllExport static bool isKeyDefined();

                        /*!
                         * @brief This function serializes the key members of an object using CDR serialization.
                         * @param cdr CDR serialization object.
                         */
                        eProsima_user_DllExport void serializeKey(
                                eprosima::fastcdr::Cdr& cdr) const;

                    private:

                        uint16_t m_id;
                        uint32_t m_size;
                        std::vector<uint8_t> m_raw_data;
                    };
                } // namespace device
            } // namespace raw
        } // namespace topics
    } // namespace dds
} // namespace librealsense

#endif // _FAST_DDS_GENERATED_LIBREALSENSE_DDS_TOPICS_RAW_DEVICE_CONTROL_H_